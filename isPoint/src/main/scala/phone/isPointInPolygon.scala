package phone

import java.awt.geom.Point2D
import java.util
import java.util.{ArrayList, List}
import scala.util.control.Breaks
import scala.util.control.Breaks.{break, breakable}


object isPointInPolygon {
  def main(args: Array[String]): Unit = { // 被检测的经纬度点
    val X = "106.544"
    val Y = "29.5804"
    // 商业区域（百度多边形区域经纬度集合）
    val partitionLocation = "106.56001026965227_29.60807463120039,106.55993247059985_29.607994476116062,106.5598715151746_29.607941247678472,106.55829210302151_29.607725234456474,106.55740201439603_29.608087082009337,106.55730736076626_29.607575930076894,106.55716363889681_29.6076010911003,106.55688121913815_29.6076129178615,106.5548436814137_29.607370648954728,106.55405794943012_29.607252862487464,106.55406158345191_29.606446143780747,106.55400273555972_29.605554040336543,106.553930796248_29.605190670075988,106.55349877550701_29.603008535152696,106.55349056479096_29.60284967802449,106.55348275133743_29.602698541706083,106.5534217441716_29.601518349712208,106.55341119305209_29.601314237514117,106.55258815887892_29.601353981781184,106.55121118741936_29.601420474962516,106.54884442429699_29.601451477197266,106.54704216981105_29.60147508568613,106.54690452768828_29.601476891159894,106.54606019019356_29.6014879468804,106.54414157467347_29.6015092922274,106.54414125363999_29.601509295232784,106.54314380973437_29.601520392834153,106.54089156199286_29.601531433454358,106.54087783192963_29.601581166059084,106.54082117355097_29.601556881031648,106.54050579977309_29.601604396838887,106.54051467592362_29.6015718124838,106.5385558271671_29.60185425094243,106.53853397029648_29.601857402528456,106.53537480673401_29.60231290944346,106.5348030101894_29.602395354934693,106.53272551557343_29.602787777485915,106.5319628039113_29.60290969076834,106.53189651683526_29.60292028584214,106.53187631953064_29.602923515227687,106.53107663977389_29.603051339840786,106.5300536515577_29.603103534773624,106.52881869960565_29.602959328285827,106.52831351912047_29.604620012687285,106.52829357609392_29.60470940425377,106.52827388302356_29.60478245287441,106.52816330611371_29.60501934994048,106.52811870204404_29.605204063743255,106.52808764790569_29.60527493391051,106.52798994017722_29.605838198799205,106.52773374588196_29.60667368073954,106.52769541332738_29.60682673945096,106.52753431476474_29.607498690569273,106.52740079126973_29.607485746367594,106.52715163203166_29.607450414272485,106.52704009256452_29.607432894550566,106.52694718285349_29.607415577204744,106.52678733041314_29.607389380666877,106.52665442550592_29.607367548473892,106.52646388971569_29.607336941281158,106.52631031878639_29.607327090907035,106.52617543322391_29.607313379758804,106.52604986564442_29.6072997720238,106.52594292572996_29.607286370390955,106.52588279401314_29.607257209437275,106.52579920053874_29.607239998458052,106.52572963758617_29.607218871944855,106.52566449347277_29.60721407741046,106.52559956860645_29.607210651180417,106.52556675103276_29.60720891893914,106.52539437132502_29.607211071514033,106.52530629632854_29.60718160130285,106.52519899989622_29.607192616925555,106.52506463442025_29.607207404788344,106.52486314462752_29.607207192604818,106.5246918706347_29.60721546876557,106.52439828448861_29.60722441244994,106.5242445354408_29.607226770866426,106.52407203597797_29.607237061610302,106.52391386321219_29.607223089383,106.5237739094253_29.607237814438886,106.52365846751236_29.60723245723764,106.52350501777568_29.607214466435625,106.52198223730973_29.607248051618747,106.51771979814936_29.607185356183738,106.51771454053215_29.607186484973557,106.51761166592588_29.60721382674299,106.51749504964224_29.607224735605257,106.51740650529646_29.607227816057126,106.51730876014817_29.607222651505086,106.51715104778845_29.607241239978297,106.5170020746527_29.607235504468285,106.51689477930684_29.607246515181888,106.51679213877544_29.607257577460867,106.51670371053028_29.60725251576172,106.51660590524745_29.60725142108351,106.51650326777678_29.607262484039026,106.51638677575453_29.607265253848194,106.51614053077351_29.607250466312184,106.51611232790611_29.60724877080682,106.51618775311235_29.608420816888234,106.51593453874463_29.6084232039745,106.51417898977576_29.6084397284123,106.51410823553432_29.60844039718474,106.51339531421077_29.608088552312182,106.51304146583188_29.607801434937244,106.51260344788666_29.607730059276037,106.51233721237574_29.60782377786392,106.51194658269644_29.608000052232235,106.51175587520262_29.608030861752596,106.51125885136929_29.608031746528887,106.51088451684367_29.607835542737913,106.51049251870656_29.607553626273265,106.51024080482924_29.607155562022108,106.50920235253705_29.606375060761064,106.50861696269307_29.60594260081096,106.50750889254995_29.605253563633415,106.50733615505062_29.605120274468366,106.50707727184603_29.604987103538583,106.50682590639647_29.604976130627243,106.50664905795837_29.60496600018777,106.50681035239992_29.604681305590123,106.50746437824667_29.603526920832202,106.50594210157615_29.60355665989357,106.50458350417918_29.603611806916373,106.50448735722533_29.60362308831435,106.50420230906309_29.60365653301981,106.50253932573138_29.603671475571804,106.50077042382047_29.60368736800831,106.49917103567681_29.603701737328468,106.498414508688_29.603708533545106,106.4983837402575_29.603708811411384,106.49836893825325_29.603708944587627,106.49658869902163_29.603705225538103,106.49507492813817_29.603702062082778,106.49410523128445_29.603700034998514,106.49371569288058_29.60369129872139,106.49371499916562_29.603691282865924,106.49371361896179_29.603691251150973,106.49233652026685_29.603660360896704,106.49232264288379_29.603660049958833,106.49128421793097_29.603667961815713,106.4895133596406_29.60359848769007,106.48948667256748_29.603874336437183,106.4896067390447_29.605660858509644,106.48964213475715_29.605911540994818,106.48983130907128_29.607251314489694,106.48990427104252_29.6076565151652,106.49061982291423_29.608725940750087,106.49144033993318_29.609736946533634,106.4929523072491_29.611336794718284,106.49387787601057_29.61206022601984,106.49462095064268_29.612445631752987,106.495057202632_29.612699229207653,106.49533978384592_29.612799785053717,106.49752359570574_29.61357689353397,106.4981483829137_29.61383805813848,106.49833969957687_29.61391802955775,106.49859138813174_29.61402323253994,106.49971565122011_29.614280699331356,106.50047970684172_29.61445567453441,106.50206054539437_29.614817699241986,106.50441946098019_29.614903644396115,106.50562539931084_29.61494757974564,106.50708566781829_29.615000781779898,106.50755492507773_29.615017878386787,106.50788598047973_29.61502994129794,106.51031497207546_29.615249297217314,106.51097505195771_29.615308907148975,106.511089210452_29.61532418507302,106.51452127925238_29.615783493096842,106.51455990171368_29.61578866281148,106.51456057390148_29.615788751644413,106.51639338916715_29.616194102473333,106.51766236174883_29.616474753829657,106.52354974872803_29.617398800576424,106.52716413710259_29.618008771673797,106.52782354221519_29.61812254330852,106.52919356434239_29.618379175796505,106.53023895503165_29.61869646044591,106.53195128378023_29.619227981667706,106.53363530923248_29.620014819395404,106.53376271663815_29.620088206843054,106.53558037559593_29.621135204264093,106.5373816314448_29.62210399758115,106.53850179445479_29.622484783339768,106.53940258447341_29.62260639598836,106.53940829052017_29.622608592032165,106.53941276115143_29.622610311964838,106.53941315146892_29.622610343189002,106.539456290672_29.622613646850688,106.53953736693718_29.622619854652307,106.53998702761997_29.62265428559075,106.54363455213041_29.6229335675114,106.54556544817662_29.623022597103404,106.54873349707638_29.623168610311005,106.54887443277482_29.623247791445714,106.55076973245629_29.62328375798841,106.55120014875783_29.623208443941397,106.55284649998026_29.622616653845583,106.5537396388549_29.621508354267625,106.55427554305673_29.620646747567875,106.55452523333386_29.618043530823773,106.55579502313512_29.615461067058668,106.55824842853607_29.613717933915545,106.55938070231291_29.613356867795424,106.56194403283865_29.61282956004303,106.56203737346205_29.612724075494235,106.5621887255045_29.61255712742265,106.5623818292615_29.612321248165717,106.5623987805681_29.612303983413156,106.56263155545389_29.611886871621316,106.56268030154202_29.61177741273462,106.5627070166347_29.611670920136312,106.56271978738079_29.61148499232517,106.56272214459518_29.611478587490414,106.56272321606201_29.611320342778306,106.56271091707055_29.611223742168757,106.56270175646432_29.61119846841287,106.5626759443615_29.611079479157276,106.56256104871035_29.6109233658292,106.56238792489168_29.610712774602387,106.56215145039981_29.61045026189094,106.56193009889367_29.610274836340043,106.56139984878008_29.60980208497448,106.56100506841003_29.609421985065936,106.56075453706535_29.609100737138572,106.56074431474643_29.60909105290967,106.56071568834794_29.60906394212042,106.56063534902135_29.60892824601401,106.560589672528_29.608796653980622,106.56053010301713_29.60855237353007,106.56052567583227_29.60854305393816,106.56048947177018_29.608471511091658,106.56045837776256_29.608434283819978,106.5603532914215_29.60833634729966,106.56024695217684_29.608240770142803,106.56001026965227_29.60807463120039"
    System.out.println(isInPolygon(X, Y, partitionLocation))
  }

  /**
   * 判断当前位置是否在多边形区域内
   *
   * @param
   * @param partitionLocation 区域顶点
   * @return
   */
  def isInPolygon(X: String, Y: String, partitionLocation: String): Boolean = {
    val p_x = X.toDouble
    val p_y = Y.toDouble
    val point = new Point2D.Double(p_x, p_y)
    val pointList =  new util.ArrayList[Point2D.Double]
    val strList = partitionLocation.split(",")
    for (str <- strList) {
      val points = str.split("_")
      val polygonPoint_x = points(0).toDouble
      val polygonPoint_y = points(1).toDouble
      val polygonPoint = new Point2D.Double(polygonPoint_x, polygonPoint_y)
      pointList.add(polygonPoint)
    }
    IsPtInPoly(point, pointList)
  }

  /**
   * 判断点是否在多边形内，如果点位于多边形的顶点或边上，也算做点在多边形内，直接返回true
   *
   * @param point 检测点
   * @param pts   多边形的顶点
   * @return 点在多边形内返回true,否则返回false
   */
  def IsPtInPoly(point: Point2D.Double, pts: util.ArrayList[Point2D.Double]): Boolean = {
    val N = pts.size()
    val boundOrVertex = true //如果点位于多边形的顶点或边上，也算做点在多边形内，直接返回true
    var intersectCount = 0 //cross points count of x//x的交叉点计数
    val precision = 2e-10 //浮点类型计算时候与0比较时候的容差
    var p1 = new Point2D.Double
    var p2 = new Point2D.Double
    var p = new Point2D.Double
    p = point //当前点
    p1 = pts.get(0)//left vertex
    for (i <- 1 to N) {
      if(p.equals(p1)){
        return boundOrVertex;//p is an vertex
      }
      p2 = pts.get(i % N)

      breakable(
        if (p.x < Math.min(p1.x, p2.x) || p.x > Math.max(p1.x, p2.x)) {
          p1 = p2
          break
        })

      if (p.x > Math.min(p1.x, p2.x) && p.x < Math.max(p1.x, p2.x)) if (p.y <= Math.max(p1.y, p2.y)) {
        if (p.y <= Math.max(p1.y, p2.y)) {
          if (p1.x == p2.x && p.y >= Math.min(p1.y, p2.y)) return boundOrVertex

          if (p1.y == p2.y) if (p1.y == p.y) return boundOrVertex
          else { //before ray
            intersectCount += 1
          }
          else {
            val xinters = (p.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y
            if (Math.abs(p.y - xinters) < precision) return boundOrVertex
            if (p.y < xinters) intersectCount += 1
          }

        }

      }else{
        if (p.x == p2.x && p.y <= p2.y) {
          val p3 = pts.get((i + 1) % N)
          if (p.x >= Math.min(p1.x, p3.x) && p.x <= Math.max(p1.x, p3.x)) intersectCount += 1
          else intersectCount += 2
        }
      }
      p1 = p2
    }

    if (intersectCount % 2 == 0) { //偶数在多边形外
      return false
    }
    else { //奇数在多边形内
      return true
    }


  }







}